@page "/login"
@using OrienteeringPlanner.Models
@using OrienteeringPlanner.Services
@using System.Net

@inject IClubService clubService
@inject IRunService runService
@inject IJSRuntime JSRuntime


<OrienteeringPlanner.Shared.Modal @ref="Modal">
    <Title>@ModalTitle</Title>
    <Body>
        @ModalBody
    </Body>
</OrienteeringPlanner.Shared.Modal>

<div class="container pb-3" style="height: 0%;">
    @if (!loggedIn && club != null)
    {
        <h1 class="mt-5">Login</h1>
        <EditForm Model="@loginRequest" OnValidSubmit="@ClubLoginAsync" class="pr-5">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="LoginInputEmail">Email address</label>
                <InputText @bind-Value="loginRequest.Email" type="email" class="form-control" id="LoginInputEmail" aria-describedby="emailHelp" placeholder="Enter email" requried />
            </div>
            <div class="form-group">
                <label for="LoginInputPassword">Password</label>
                <InputText @bind-Value="loginRequest.Password" type="password" class="form-control" id="LoginInputPassword" placeholder="Password" requried />
            </div>
            @if (!loginLoading)
            {
                <button type="submit" class="btn btn-info">Login</button>
            }
            else
            {
                <button class="btn btn-info" type="button" disabled>
                    <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
        </EditForm>
    }
    else
    {
        <h1 class="mt-5">Create new run</h1>
        <EditForm Model="@run" OnValidSubmit="@CreateRun" id="createRunForm" class="pr-4">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="RunInputName">Map name</label>
                <InputText @bind-Value="run.Name" type="text" class="form-control" id="RunInputName" aria-describedby="nameHelp" placeholder="Enter name of map" requried />
            </div>
            <div class="row">
                <div class="form-group col-12 col-sm-6">
                    <label for="RunInputStartDateTime">Start date and time</label>
                    <input @bind="run.StartDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" id="RunInputStartDateTime" placeholder="Start date and time for run" requried>
                </div>
                <div class="form-group col-12 col-sm-6">
                    <label for="RunInputEndDateTime">End date and time</label>
                    <input @bind="run.EndDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" id="RunInputEndDateTime" placeholder="End date and time for run" requried>
                </div>
            </div>
            <div class="form-group">
                <label for="RunInputGotoLink">Link to website/bulletin</label>
                <InputText @bind-Value="run.GotoLink" type="text" class="form-control" id="RunInputGotoLink" aria-describedby="nameHelp" placeholder="Enter link to website or bulletin" requried />
            </div>
            <div id="createRunMap" style='width: 100%; height: 600px;' class="mb-5"></div>
            @if (!createRunLoading)
            {
                <button type="submit" class="btn btn-info">Create Run</button>
            }
            else
            {
                <button class="btn btn-primary" type="button" disabled>
                    <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
        </EditForm>
    }
</div>

@code {

    private ClubWithExtendedData club = new ClubWithExtendedData();
    private LoginRequest loginRequest = new LoginRequest();
    private Run run = new Run();
    private bool loggedIn = false;
    private bool loginLoading = false;
    private bool createRunLoading = false;

    private OrienteeringPlanner.Shared.Modal Modal { get; set; }
    private string ModalTitle { get; set; }
    private string ModalBody { get; set; }
    private string ModalColor { get; set; }

    protected override void OnInitialized()
    {
        SetRunDateTimes();

    }

    private async void ClubLoginAsync()
    {
        if (!string.IsNullOrEmpty(loginRequest.Email) && !string.IsNullOrEmpty(loginRequest.Password))
        {
            loginLoading = true;
            var response = await clubService.ClubLogin(loginRequest);

            if (response != null)
            {
                club = response;
                loggedIn = true;

                if (!club.ExtendedData.HasChangedPassword)
                {
                    ChangeModalDataAndShow(
                        "Remember to update your password",
                        "You have to update your password. Change it below:",
                        "black"
                    );
                    Modal.changePasswordRequest.ClubToken = club.ClubData.Token;
                    Modal.changePasswordRequest.ClubId = club.ClubData.Id;
                    Modal.ShowChangePasswordForm();
                }

                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("RenderCreateRunMapboxComponent", "");
            }
            else
            {
                ChangeModalDataAndShow(
                    "Something went wrong",
                    "There were some problems when trying to login. Please try again.",
                    "red"
                );

                loginLoading = false;
                StateHasChanged();

            }
        }
        else
        {
            ChangeModalDataAndShow(
                "Invalid login credidentials.",
                "Please inform both your Email and Password!",
                "red"
            );

            StateHasChanged();
        }
        loginLoading = false;
    }

    private async void CreateRun()
    {
        Modal.HideChangePasswordForm(); // Always hide change password form

        createRunLoading = true;
        if (loggedIn && club != null)
        {
            var runCoords = await JSRuntime.InvokeAsync<Coords>("GetRunCoords", "");

            run.Lat = runCoords.Lat;
            run.Lng = runCoords.Lng;
            run.ClubId = club.ClubData.Id;

            var responseMessage = await runService.CreateRun(run, club.ClubData);

            if (responseMessage.StatusCode == HttpStatusCode.OK)
            {
                //await JSRuntime.InvokeVoidAsync("ResetFormDate", "");
                //run = new Run();
                //SetRunDateTimes();

                ChangeModalDataAndShow(
                    "Run has been created", "" +
                    "Your run has been created successfully!",
                    "green"
                );
            }
            else
            {
                ChangeModalDataAndShow(
                    "Error",
                    "Your run has not been created! Please try again.",
                    "red"
                );
            }
        }
        createRunLoading = false;
        Modal.Open();
        StateHasChanged();

    }

    private void SetRunDateTimes()
    {
        run.StartDateTime = DateTime.Today.AddDays(1) + new TimeSpan(10, 30, 0); // Tomorrow
        run.EndDateTime = run.StartDateTime.AddDays(1) + new TimeSpan(4, 30, 0); ;
    }

    private void ChangeModalDataAndShow(string title, string body, string color)
    {
        ModalTitle = title;
        ModalBody = body;
        Modal.UpdateColor(color);

        Modal.Open();
    }

}
