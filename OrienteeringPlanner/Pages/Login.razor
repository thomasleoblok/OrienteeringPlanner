@page "/login"
@using OrienteeringPlanner.Models
@using OrienteeringPlanner.Services
@using System.Net

@inject IClubService clubService
@inject IRunService runService
@inject IJSRuntime JSRuntime


<OrienteeringPlanner.Shared.Modal @ref="Modal">
    <Title>@ModalTitle</Title>
    <Body>
        @ModalBody
    </Body>
</OrienteeringPlanner.Shared.Modal>

<div class="container pb-3" style="height: 0%;">
    @if (!loggedIn && club != null)
    {
        <h1 class="mt-5">Login</h1>
        <EditForm Model="@loginRequest" OnValidSubmit="@ClubLoginAsync" class="pr-5">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="LoginInputEmail">Email address</label>
                <InputText @bind-Value="loginRequest.Email" type="email" class="form-control" id="LoginInputEmail" aria-describedby="emailHelp" placeholder="Enter email" requried />
            </div>
            <div class="form-group">
                <label for="LoginInputPassword">Password</label>
                <InputText @bind-Value="loginRequest.Password" type="password" class="form-control" id="LoginInputPassword" placeholder="Password" requried />
            </div>
            @if (!loginLoading)
            {
                <button type="submit" class="btn btn-info">Login</button>
            }
            else
            {
                <button class="btn btn-info" type="button" disabled>
                    <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
        </EditForm>
    }
    else
    {
        <div class="card mt-4" style="background-color: rgba(0, 0, 0, 0.0)">
            <div class="card-header" style="background-color: rgba(0, 0, 0, 0.4)">
                <ul class="nav nav-pills card-header-pills">
                    <li class="nav-item">
                        <a class="nav-link @(loggedInState == LoggedInState.CreateRun? "active" : "")" href="javascript:void(0)" @onclick="() => ChangeLoggedInState(LoggedInState.CreateRun)">Create New Run</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(loggedInState == LoggedInState.YourRuns? "active" : "")" href="javascript:void(0)" @onclick="() => ChangeLoggedInState(LoggedInState.YourRuns)">Your Upcoming Runs</a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                @switch (loggedInState)
                {
                    case LoggedInState.CreateRun:
                        <section>
                            <h1 class="mt-5">Create new run</h1>
                            <EditForm Model="@run" OnValidSubmit="@CreateRun" id="createRunForm" class="pr-4">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <label for="RunInputName">Map name</label>
                                    <InputText @bind-Value="run.Name" type="text" class="form-control" id="RunInputName" aria-describedby="nameHelp" placeholder="Enter name of map" requried />
                                    @if (run.Name == null || run.Name.Length == 0)
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            Please type in name of run
                                        </div>
                                    }
                                </div>
                                <div class="row">
                                    <div class="form-group col-12 col-sm-6">
                                        <label for="RunInputStartDateTime">Start date and time</label>
                                        <input @bind="run.StartDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" id="RunInputStartDateTime" placeholder="Start date and time for run" requried>
                                    </div>
                                    <div class="form-group col-12 col-sm-6">
                                        <label for="RunInputEndDateTime">End date and time</label>
                                        <input @bind="run.EndDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" id="RunInputEndDateTime" placeholder="End date and time for run" requried>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="RunInputGotoLink">Link to website/bulletin</label>
                                    <InputText @bind-Value="run.GotoLink" type="text" class="form-control" id="RunInputGotoLink" aria-describedby="nameHelp" placeholder="Enter link to website or bulletin" requried />
                                    @if (run.GotoLink == null || run.GotoLink.Length == 0)
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            Please link to your website or bulletin
                                        </div>
                                    }
                                </div>
                                <div onload="RenderCreateRunMapboxComponent()" id="createRunMap" style='width: 100%; height: 600px;' class="mb-5"></div>
                                @if (!createRunLoading)
                                {
                                    <button type="submit" class="btn btn-info">Create Run</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" type="button" disabled>
                                        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                                        Loading...
                                    </button>
                                }
                            </EditForm>
                        </section>
                        break;
                    case LoggedInState.YourRuns:
                        <section>
                            @if (upcomingRuns != null)
                            {
                                <table class="table table-hover" style="color: white;">
                                    <thead>
                                        <tr>
                                            <td></td>
                                            <td></td>
                                            <th scope="col">Name</th>
                                            <th scope="col">Latitude</th>
                                            <th scope="col">Longitude</th>
                                            <th scope="col">Website/Bulletin Link</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var r in upcomingRuns)
                                        {
                                        <tr>
                                            <td style="color: green; cursor:pointer;" @onclick="() => EditRun(r)">Edit</td>
                                            <td style="color: red; cursor:pointer;" @onclick="() => DeleteRun(r)">Delete</td>
                                            <th scope="row">@r.Name</th>
                                            <td>@r.Lat</td>
                                            <td>@r.Lng</td>
                                            <td><a>@r.GotoLink</a></td>
                                        </tr>

                                        }
                                    </tbody>
                                </table>
                            }
                        </section>
                        break;
                    default:
                        break;
                }
            </div>
        </div>

    }
</div>

@code {

    private ClubWithExtendedData club = new ClubWithExtendedData();
    private LoginRequest loginRequest = new LoginRequest();
    private Run run = new Run();
    private bool loggedIn = false;
    private bool loginLoading = false;
    private bool createRunLoading = false;
    private OrienteeringPlanner.Shared.Modal Modal { get; set; }
    private string ModalTitle { get; set; }
    private string ModalBody { get; set; }
    private string ModalColor { get; set; }
    private LoggedInState loggedInState = LoggedInState.CreateRun;
    private IEnumerable<Run> upcomingRuns { get; set; }

    protected override void OnInitialized()
    {
        run.Name = "";
        run.GotoLink = "";
        SetRunDateTimes();
    }

    private async void ClubLoginAsync()
    {
        if (!string.IsNullOrEmpty(loginRequest.Email) && !string.IsNullOrEmpty(loginRequest.Password))
        {
            loginLoading = true;
            var response = await clubService.ClubLogin(loginRequest);

            if (response != null)
            {
                club = response;
                loggedIn = true;

                if (!club.ExtendedData.HasChangedPassword)
                {
                    ChangeModalDataAndShow(
                        "Remember to update your password",
                        "You have to update your password. Change it below:",
                        "black"
                    );
                    Modal.changePasswordRequest.ClubToken = club.ClubData.Token;
                    Modal.changePasswordRequest.ClubId = club.ClubData.Id;
                    Modal.ShowChangePasswordForm();
                }

                RenderMap();
            }
            else
            {
                ChangeModalDataAndShow(
                    "Something went wrong",
                    "There were some problems when trying to login. Please try again.",
                    "red"
                );

                loginLoading = false;
                StateHasChanged();

            }
        }
        else
        {
            ChangeModalDataAndShow(
                "Invalid login credidentials.",
                "Please inform both your Email and Password!",
                "red"
            );

            StateHasChanged();
        }
        loginLoading = false;
    }

    private async void CreateRun()
    {
        Modal.HideChangePasswordForm(); // Always hide change password form

        createRunLoading = true;
        if (loggedIn && club != null)
        {
            var runCoords = await JSRuntime.InvokeAsync<Coords>("GetRunCoords", "");

            run.Lat = runCoords.Lat;
            run.Lng = runCoords.Lng;
            run.ClubId = club.ClubData.Id;

            if (RunModelIsValid(run))
            {
                var responseMessage = await runService.CreateRun(run, club.ClubData);

                if (responseMessage.StatusCode == HttpStatusCode.OK)
                {
                    //await JSRuntime.InvokeVoidAsync("ResetFormDate", "");
                    //run = new Run();
                    //SetRunDateTimes();

                    ChangeModalDataAndShow(
                        "Run has been created",
                        "Your run has been created successfully!",
                        "green"
                    );
                }
                else
                {
                    ChangeModalDataAndShow(
                        "Error",
                        "Your run has not been created! Please try again.",
                        "red"
                    );
                }
            }
        }
        createRunLoading = false;
        Modal.Open();
        StateHasChanged();

    }

    private void SetRunDateTimes()
    {
        run.StartDateTime = DateTime.Today.AddDays(1) + new TimeSpan(10, 00, 0); // Tomorrow
        run.EndDateTime = run.StartDateTime.AddDays(1) + new TimeSpan(5, 00, 0); ;
    }

    private void ChangeModalDataAndShow(string title, string body, string color)
    {
        ModalTitle = title;
        ModalBody = body;
        Modal.UpdateColor(color);

        Modal.Open();
    }

    private bool RunModelIsValid(Run newRun)
    {
        if (newRun.Lat == 0 && newRun.Lng == 0)
        {
            ChangeModalDataAndShow(
                "Your run is lacking information",
                "Your run cannot be created! You are missing a location. Please click on the map to choose a location or search for the location in the input-field.",
                "red"
            );
            return false;
        }
        else if (string.IsNullOrEmpty(newRun.Name))
        {
            ChangeModalDataAndShow(
                "Your run is lacking information",
                "Your run cannot be created! You are missing a name. Please type in the name of the run in the input-field.",
                "red"
            );
            return false;
        }
        else if (string.IsNullOrEmpty(newRun.GotoLink))
        {
            ChangeModalDataAndShow(
                "Your run is lacking information",
                "Your run cannot be created! You are missing a link to your website. Please type in the web-address to the website or bulletin for the run in the input-field.",
                "red"
            );
            return false;
        }
        else
        {
            return true;
        }
    }

    private void ChangeLoggedInState(LoggedInState newState)
    {
        loggedInState = newState;
        if (newState == LoggedInState.YourRuns)
        {
            GetUpcomingRunsForClubAsync();
        }
    }

    private async void GetUpcomingRunsForClubAsync()
    {
        upcomingRuns = await runService.GetUpcomingRunsForClub(club.ClubData);
        if (upcomingRuns != null)
        {
            StateHasChanged();
        }
    }

    private async void DeleteRun(Run r)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this run '{r.Name}'?"))
            return;

        var responseMessage = await runService.DeleteRun(r, club.ClubData);

        if (responseMessage.StatusCode == HttpStatusCode.OK)
        {
            ChangeModalDataAndShow("Run has been Deleted", "Your run has been deleted successfully!", "green");
            GetUpcomingRunsForClubAsync();
        }
        else
        {
            ChangeModalDataAndShow("Error", "Error when trying to delete run. Please try again!", "red");
        }
        Modal.Open();
    }

    private async void EditRun(Run r)
    {
        //var responseMessage = await runService.DeleteRun(r, club.ClubData);

        //if (responseMessage.StatusCode == HttpStatusCode.OK)
        //{
        //    ChangeModalDataAndShow("Run has been Edited", "Your run has been edited successfully!", "green");
        //    GetUpcomingRunsForClubAsync();
        //}
        //else
        //{
        //    ChangeModalDataAndShow("Error", "Error when trying to edit run. Please try again!", "red");
        //}
        //Modal.Open();
    }

    private async void RenderMap()
    {
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("RenderCreateRunMapboxComponent", "");
        StateHasChanged();
    }

    private enum LoggedInState
    {
        CreateRun,
        YourRuns
    }

}
