@page "/login"
@using OrienteeringPlanner.Models
@using OrienteeringPlanner.Services

@inject IClubService clubService
@inject IRunService runService

<div class="container mt-5">
    @if (!loggedIn && club != null)
    {
        <h1>Login</h1>
        <EditForm Model="@loginRequest" OnValidSubmit="@ClubLoginAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="LoginInputEmail">Email address</label>
                <InputText @bind-Value="loginRequest.Email" type="email" class="form-control" id="LoginInputEmail" aria-describedby="emailHelp" placeholder="Enter email" />
            </div>
            <div class="form-group">
                <label for="LoginInputPassword">Password</label>
                <InputText @bind-Value="loginRequest.Password" type="password" class="form-control" id="LoginInputPassword" placeholder="Password" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    }
    else
    {
        <h1>Create new run</h1>
        <EditForm Model="@run" OnValidSubmit="@CreateRun">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="RunInputName">Map name</label>
                <InputText @bind-Value="run.Name" type="text" class="form-control" id="RunInputName" aria-describedby="nameHelp" placeholder="Enter name of map" />
            </div>
            <div class="form-group">
                <label for="RunInputStartDateTime">Start date and time</label>
                <input @bind="run.StartDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" id="RunInputStartDateTime" placeholder="Start date and time for run">
            </div>
            <div class="form-group">
                <label for="RunInputEndDateTime">End date and time</label>
                <input @bind="run.EndDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local" class="form-control" id="RunInputEndDateTime" placeholder="End date and time for run">
            </div>
            <button type="submit" class="btn btn-primary">Create Run</button>
        </EditForm>
    }
</div>
@code {

    private Club club = new Club();
    private LoginRequest loginRequest = new LoginRequest();
    private Run run = new Run();
    private bool loggedIn = false;

    protected override void OnInitialized()
    {
        run.StartDateTime = DateTime.Now;
        run.EndDateTime = run.StartDateTime.AddDays(1);

    }

    private async void ClubLoginAsync()
    {
        if (!string.IsNullOrEmpty(loginRequest.Email) && !string.IsNullOrEmpty(loginRequest.Password))
        {
            var response = await clubService.ClubLogin(loginRequest);

            if (response != null)
            {
                club =  response;
                loggedIn = true;
                StateHasChanged();
            }
        }
    }

    private async void CreateRun()
    {
        if (loggedIn && club != null)
        {
            var responseMessage = await runService.CreateRun(run, club);
        }
    }

}