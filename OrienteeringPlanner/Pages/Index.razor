@page "/"
@using OrienteeringPlanner.Models;
@using OrienteeringPlanner.Services;
@using System.Net.Http;
@using System.Net.Http.Json;

@inject IRunService runService

@inject IJSRuntime JSRuntime

<div class="searchSpanDiv">
    <label for="searchSpanRange" class="form-label">Search @searchSpan</label>
    <br />
    <input value="@searchSpan" @oninput="@((args) => ChangeSearchSpan(args.Value.ToString()))" type="range" class="form-control-range" min="0" max="30" step="1" id="searchSpanRange">
</div>
<div id="map" style='width: 100%; height: 100%;'></div>


@code
    {
    private IEnumerable<Run> upcomingRuns { get; set; } = new List<Run>();
    private int searchSpan { get; set; } = 7;

    [Inject]
    public IRunService RunService { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //GetUpcomingRuns();
        upcomingRuns = (await runService.GetUpcomingRuns(searchSpan)).ToList();

        await JSRuntime.InvokeVoidAsync("RenderMapboxComponent", upcomingRuns);

        return;

    }

    protected async Task GetUpcomingRuns()
    {
        HttpClient http = new HttpClient();
        upcomingRuns = await http.GetFromJsonAsync<IEnumerable<Run>>("api/runs/GetUpcomingRuns");
    }



    public async void ChangeSearchSpan(string range)
    {
        searchSpan = Convert.ToInt32(range);

        upcomingRuns = (await runService.GetUpcomingRuns(searchSpan)).ToList();

        await JSRuntime.InvokeVoidAsync("RenderMapboxComponent", upcomingRuns);
    }

}